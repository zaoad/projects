/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package serverremotepcadministration;
import java.io.BufferedReader;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintStream;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
/**
 *
 * @author User
 */
public class multiclient extends javax.swing.JFrame implements Runnable {

    /**
     * Creates new form mainf
     */
    
    static int numberofclient;
    static ServerSocket ss[];
    static Socket s[];

    static DataInputStream din[];

    static DataOutputStream dout[];
    String cmd;
    static int sendfile=250;
    boolean done;
    
    public multiclient(int numberofclient) {
                this.numberofclient=numberofclient;

        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton4 = new javax.swing.JButton();
        shutdown = new javax.swing.JButton();
        sleep = new javax.swing.JButton();
        install = new javax.swing.JButton();
        restart = new javax.swing.JButton();
        lock = new javax.swing.JButton();
        exit = new javax.swing.JButton();
        send = new javax.swing.JButton();
        sendmessage = new javax.swing.JButton();
        bakc = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        jButton4.setText("jButton4");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(650, 450));

        shutdown.setBackground(new java.awt.Color(0, 0, 102));
        shutdown.setFont(new java.awt.Font("Showcard Gothic", 0, 12)); // NOI18N
        shutdown.setForeground(new java.awt.Color(102, 255, 0));
        shutdown.setText("shutdown");
        shutdown.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                shutdownActionPerformed(evt);
            }
        });

        sleep.setBackground(new java.awt.Color(0, 0, 102));
        sleep.setFont(new java.awt.Font("Showcard Gothic", 0, 12)); // NOI18N
        sleep.setForeground(new java.awt.Color(102, 255, 0));
        sleep.setText("sleep");
        sleep.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sleepActionPerformed(evt);
            }
        });

        install.setBackground(new java.awt.Color(0, 0, 102));
        install.setFont(new java.awt.Font("Showcard Gothic", 0, 12)); // NOI18N
        install.setForeground(new java.awt.Color(102, 255, 0));
        install.setText("install");
        install.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                installActionPerformed(evt);
            }
        });

        restart.setBackground(new java.awt.Color(0, 0, 102));
        restart.setFont(new java.awt.Font("Showcard Gothic", 0, 12)); // NOI18N
        restart.setForeground(new java.awt.Color(102, 255, 0));
        restart.setText("restart");
        restart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                restartActionPerformed(evt);
            }
        });

        lock.setBackground(new java.awt.Color(0, 0, 102));
        lock.setFont(new java.awt.Font("Showcard Gothic", 0, 12)); // NOI18N
        lock.setForeground(new java.awt.Color(102, 255, 0));
        lock.setText("lock ");
        lock.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lockActionPerformed(evt);
            }
        });

        exit.setBackground(new java.awt.Color(0, 0, 102));
        exit.setFont(new java.awt.Font("Showcard Gothic", 0, 12)); // NOI18N
        exit.setForeground(new java.awt.Color(102, 255, 0));
        exit.setText("exit");
        exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitActionPerformed(evt);
            }
        });

        send.setBackground(new java.awt.Color(0, 0, 102));
        send.setFont(new java.awt.Font("Showcard Gothic", 0, 12)); // NOI18N
        send.setForeground(new java.awt.Color(102, 255, 51));
        send.setText("sendfile");
        send.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendActionPerformed(evt);
            }
        });

        sendmessage.setBackground(new java.awt.Color(0, 0, 102));
        sendmessage.setFont(new java.awt.Font("Showcard Gothic", 0, 12)); // NOI18N
        sendmessage.setForeground(new java.awt.Color(102, 255, 0));
        sendmessage.setText("send a message");
        sendmessage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendmessageActionPerformed(evt);
            }
        });

        bakc.setBackground(new java.awt.Color(0, 0, 102));
        bakc.setFont(new java.awt.Font("Showcard Gothic", 0, 12)); // NOI18N
        bakc.setForeground(new java.awt.Color(102, 255, 0));
        bakc.setText("BACK");
        bakc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bakcActionPerformed(evt);
            }
        });

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/multid.PNG"))); // NOI18N
        jLabel1.setText("jLabel1");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(95, 95, 95)
                        .addComponent(shutdown)
                        .addGap(150, 150, 150)
                        .addComponent(install, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(350, 350, 350)
                        .addComponent(send, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(98, 98, 98)
                        .addComponent(lock, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(95, 95, 95)
                        .addComponent(sleep, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(98, 98, 98)
                        .addComponent(restart, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(350, 350, 350)
                        .addComponent(sendmessage))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(350, 350, 350)
                        .addComponent(exit, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(bakc)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(46, 46, 46)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(shutdown, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(install, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(49, 49, 49)
                .addComponent(send, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(165, 165, 165)
                .addComponent(lock, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(layout.createSequentialGroup()
                .addGap(130, 130, 130)
                .addComponent(sleep, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(layout.createSequentialGroup()
                .addGap(230, 230, 230)
                .addComponent(restart, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(layout.createSequentialGroup()
                .addGap(230, 230, 230)
                .addComponent(sendmessage, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(layout.createSequentialGroup()
                .addGap(327, 327, 327)
                .addComponent(exit, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(layout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addComponent(bakc))
            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 450, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void shutdownActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_shutdownActionPerformed
        // TODO add your handling code here:
            cmd="shutdown/s";
                         int opcion = JOptionPane.showConfirmDialog(null, "are you sure to shutdown your computer?", "Shutdown", JOptionPane.YES_NO_OPTION);
                           if (opcion == 0) { 
            try {
                for(int i=0;i<numberofclient;i++)
                {
                dout[i].writeUTF(cmd);
                }
            } catch (IOException ex) {
                Logger.getLogger(multiclient.class.getName()).log(Level.SEVERE, null, ex);
            }

            } else {
                    done=false;
            }
    }//GEN-LAST:event_shutdownActionPerformed

    private void sleepActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sleepActionPerformed
        // TODO add your handling code here:
        cmd="rundll32.exe powrprof.dll,SetSuspendState 0,1,0";
                        int opcion = JOptionPane.showConfirmDialog(null, "are you sure to sleep?", "Sleep", JOptionPane.YES_NO_OPTION);
                            if (opcion == 0) { try {
                for(int i=0;i<numberofclient;i++)
                {
                    dout[i].writeUTF(cmd);
                }
            } catch (IOException ex) {
                Logger.getLogger(multiclient.class.getName()).log(Level.SEVERE, null, ex);
            }
                            } else {
                            done=false;
                        }
    }//GEN-LAST:event_sleepActionPerformed

    private void installActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_installActionPerformed
        // TODO add your handling code here:
                int opcion = JOptionPane.showConfirmDialog(null, "Do you want to send exe file first?", "Shutdown", JOptionPane.YES_NO_OPTION);
                            int a=500;
                if (opcion == 0) {
                                JFileChooser jfc = new JFileChooser();
                                 int dialog_value = jfc.showOpenDialog(null);
                                if (dialog_value == JFileChooser.APPROVE_OPTION) {
                                File target_file = jfc.getSelectedFile();
                                String s11=target_file.getName();
                              for(int i=0;i<numberofclient;i++)
                              {
                                try {
                                dout[i].writeUTF("multisendfile");
                                 } catch (IOException ex) {
                                Logger.getLogger(multiclient.class.getName()).log(Level.SEVERE, null, ex);
                                }
                                multisender send=new multisender(sendfile);  
                                send.sendFile(target_file);
                                sendfile+=1000;
                                    try {
                                        dout[i].writeUTF(s11);
                                    } catch (IOException ex) {
                                        Logger.getLogger(multiclient.class.getName()).log(Level.SEVERE, null, ex);
                                    }
                                a=a+1000;
                                }
                            
                            }
                            }
                            else{
                            multiinstallfile1 k=new multiinstallfile1(din,dout);
                            k.setVisible(true);
                            k.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
                            }
                            
//                    cmd = "unins000.exe";	
//                    int opcion1 = JOptionPane.showConfirmDialog(null, "are you sure to install "+cmd+" your computer?", "Shutdown", JOptionPane.YES_NO_OPTION);
//                            if (opcion1== 0) {
//                try {
//                    dout.writeUTF(cmd);
//                } catch (IOException ex) {
//                    Logger.getLogger(mainf.class.getName()).log(Level.SEVERE, null, ex);
//                }
//                            } else {
//                            done=false;
//                        }
//                            }
    }//GEN-LAST:event_installActionPerformed

    private void restartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_restartActionPerformed
        cmd="shutdown -r";
                         int opcion = JOptionPane.showConfirmDialog(null, "are you sure to restart your computer?", "Restart", JOptionPane.YES_NO_OPTION);
                           if (opcion == 0) { 
            try {
                
                for(int i=0;i<numberofclient;i++)
                {
                dout[i].writeUTF(cmd);
                }
            } catch (IOException ex) {
                Logger.getLogger(multiclient.class.getName()).log(Level.SEVERE, null, ex);
            }

            } else {
                    done=false;
            }
    }//GEN-LAST:event_restartActionPerformed

    private void lockActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lockActionPerformed
       cmd="Rundll32.exe User32.dll,LockWorkStation";
                         int opcion = JOptionPane.showConfirmDialog(null, "are you sure to lock your computer?", "logoff", JOptionPane.YES_NO_OPTION);
                           if (opcion == 0) { 
            try {
                System.err.println(numberofclient);
                for(int i=0;i<numberofclient;i++)
                {
                dout[i].writeUTF(cmd);
                }
            } catch (IOException ex) {
                Logger.getLogger(multiclient.class.getName()).log(Level.SEVERE, null, ex);
            }

            } else {
                    done=false;
            }
        
    }//GEN-LAST:event_lockActionPerformed

    private void sendActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendActionPerformed
        
        JFileChooser jfc = new JFileChooser();
        int dialog_value = jfc.showOpenDialog(null);
        if (dialog_value == JFileChooser.APPROVE_OPTION) {
        File target_file = jfc.getSelectedFile();
        for(int i=0;i<numberofclient;i++)
        {
        try {
            dout[i].writeUTF("multisendfile");
        } catch (IOException ex) {
           Logger.getLogger(multiclient.class.getName()).log(Level.SEVERE, null, ex);
        }
        multisender send=new multisender(sendfile);  
        send.sendFile(target_file);
        sendfile+=1000;
        }
    }
    }//GEN-LAST:event_sendActionPerformed

    private void sendmessageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendmessageActionPerformed
        // TODO add your handling code here:
        try {
           for(int i=0;i<numberofclient;i++)
                {
                dout[i].writeUTF("message");
                }
        } catch (IOException ex) {
            Logger.getLogger(multiclient.class.getName()).log(Level.SEVERE, null, ex);
        }
        multimessagebox m=new multimessagebox(dout);
        m.setVisible(true);
        m.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);   
        
    }//GEN-LAST:event_sendmessageActionPerformed

    private void exitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitActionPerformed
        // TODO add your handling code here:
        super.dispose();
    }//GEN-LAST:event_exitActionPerformed

    private void bakcActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bakcActionPerformed
      new Thread(new NumberOfClient()).start();
      super.dispose();
    }//GEN-LAST:event_bakcActionPerformed
    public void writecmd(String s) throws IOException, InterruptedException
        {
            Process p = Runtime.getRuntime().exec("cmd");
            new Thread(() -> {
        try (BufferedReader reader = new BufferedReader(new InputStreamReader(p.getInputStream()))) {
            String line;
            while ((line = reader.readLine()) != null)
                System.out.println(line);
        } catch (Exception e) {
            e.printStackTrace();
        }
        }).start();
        try (PrintStream out = new PrintStream(p.getOutputStream())) {
            out.println(s);
        // .....
        }
        p.waitFor();
    
        }
    /**
     * @param args the command line arguments
     */
    public void run() {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(multiclient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(multiclient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(multiclient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(multiclient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new multiclient(numberofclient).setVisible(true);
            }
        });
        int a=1;
         ss=new ServerSocket[numberofclient];
     s=new Socket[numberofclient];

     din=new DataInputStream[numberofclient];

    dout=new DataOutputStream[numberofclient];
        System.err.println(numberofclient);
        for(int i=0;i<numberofclient;i++)
        {
            try {
                ss[i]=new ServerSocket(a);
                //System.err.println(i);
                s[i]=ss[i].accept();
                
                System.out.println("Client Connected.....");
                
                din[i]=new DataInputStream(s[i].getInputStream());
                
                dout[i]=new DataOutputStream(s[i].getOutputStream());
                dout[i].writeInt(numberofclient);
                a=a+1;
            }
//       while(true){
//        String s=din.readUTF();
//        System.out.println(s);
//       }
            //}
            catch (IOException ex) {
                Logger.getLogger(multiclient.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bakc;
    private javax.swing.JButton exit;
    private javax.swing.JButton install;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JButton lock;
    private javax.swing.JButton restart;
    private javax.swing.JButton send;
    private javax.swing.JButton sendmessage;
    private javax.swing.JButton shutdown;
    private javax.swing.JButton sleep;
    // End of variables declaration//GEN-END:variables
}
