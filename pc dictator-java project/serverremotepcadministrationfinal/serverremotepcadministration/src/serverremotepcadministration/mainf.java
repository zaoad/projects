/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package serverremotepcadministration;
import java.io.BufferedReader;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintStream;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
/**
 *
 * @author User
 */
public class mainf extends javax.swing.JFrame implements Runnable
{
    /**
     * Creates new form mainf
     */
    static ServerSocket ss;

    static Socket s;

    static DataInputStream din;

    static DataOutputStream dout;
    static int sendport=511;
    String cmd;
    boolean done;
    
    public mainf() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton4 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        shutdown = new javax.swing.JButton();
        sleep = new javax.swing.JButton();
        install = new javax.swing.JButton();
        restart = new javax.swing.JButton();
        lock = new javax.swing.JButton();
        deleteafile = new javax.swing.JButton();
        exit = new javax.swing.JButton();
        send = new javax.swing.JButton();
        givecommamd = new javax.swing.JButton();
        fetch = new javax.swing.JButton();
        sendmessage = new javax.swing.JButton();
        screensontro = new javax.swing.JButton();
        back = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();

        jButton4.setText("jButton4");

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sin.PNG"))); // NOI18N
        jLabel1.setText("jLabel1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(660, 450));

        shutdown.setBackground(new java.awt.Color(0, 0, 102));
        shutdown.setFont(new java.awt.Font("Showcard Gothic", 0, 12)); // NOI18N
        shutdown.setForeground(new java.awt.Color(102, 255, 0));
        shutdown.setText("shutdown");
        shutdown.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                shutdownActionPerformed(evt);
            }
        });

        sleep.setBackground(new java.awt.Color(0, 0, 153));
        sleep.setFont(new java.awt.Font("Showcard Gothic", 0, 11)); // NOI18N
        sleep.setForeground(new java.awt.Color(102, 255, 0));
        sleep.setText("sleep");
        sleep.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sleepActionPerformed(evt);
            }
        });

        install.setBackground(new java.awt.Color(0, 0, 102));
        install.setFont(new java.awt.Font("Showcard Gothic", 0, 12)); // NOI18N
        install.setForeground(new java.awt.Color(102, 255, 0));
        install.setText("install");
        install.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                installActionPerformed(evt);
            }
        });

        restart.setBackground(new java.awt.Color(0, 0, 102));
        restart.setFont(new java.awt.Font("Showcard Gothic", 0, 11)); // NOI18N
        restart.setForeground(new java.awt.Color(102, 255, 0));
        restart.setText("restart");
        restart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                restartActionPerformed(evt);
            }
        });

        lock.setBackground(new java.awt.Color(0, 0, 102));
        lock.setFont(new java.awt.Font("Showcard Gothic", 0, 12)); // NOI18N
        lock.setForeground(new java.awt.Color(51, 255, 0));
        lock.setText("lock ");
        lock.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lockActionPerformed(evt);
            }
        });

        deleteafile.setBackground(new java.awt.Color(0, 0, 102));
        deleteafile.setFont(new java.awt.Font("Showcard Gothic", 0, 12)); // NOI18N
        deleteafile.setForeground(new java.awt.Color(102, 255, 0));
        deleteafile.setText("delete a file");
        deleteafile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteafileActionPerformed(evt);
            }
        });

        exit.setBackground(new java.awt.Color(0, 0, 102));
        exit.setFont(new java.awt.Font("Showcard Gothic", 0, 12)); // NOI18N
        exit.setForeground(new java.awt.Color(51, 255, 0));
        exit.setText("exit");
        exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitActionPerformed(evt);
            }
        });

        send.setBackground(new java.awt.Color(0, 0, 102));
        send.setFont(new java.awt.Font("Showcard Gothic", 0, 12)); // NOI18N
        send.setForeground(new java.awt.Color(102, 255, 51));
        send.setText("send file");
        send.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendActionPerformed(evt);
            }
        });

        givecommamd.setBackground(new java.awt.Color(0, 0, 153));
        givecommamd.setFont(new java.awt.Font("Showcard Gothic", 0, 12)); // NOI18N
        givecommamd.setForeground(new java.awt.Color(102, 255, 0));
        givecommamd.setText("give a command");
        givecommamd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                givecommamdActionPerformed(evt);
            }
        });

        fetch.setBackground(new java.awt.Color(0, 0, 102));
        fetch.setFont(new java.awt.Font("Showcard Gothic", 0, 12)); // NOI18N
        fetch.setForeground(new java.awt.Color(51, 255, 0));
        fetch.setText("fetch a file");
        fetch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fetchActionPerformed(evt);
            }
        });

        sendmessage.setBackground(new java.awt.Color(0, 0, 102));
        sendmessage.setFont(new java.awt.Font("Showcard Gothic", 0, 12)); // NOI18N
        sendmessage.setForeground(new java.awt.Color(102, 255, 51));
        sendmessage.setText("send a message");
        sendmessage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendmessageActionPerformed(evt);
            }
        });

        screensontro.setBackground(new java.awt.Color(0, 0, 153));
        screensontro.setFont(new java.awt.Font("Showcard Gothic", 0, 12)); // NOI18N
        screensontro.setForeground(new java.awt.Color(102, 255, 51));
        screensontro.setText("Screen Control");
        screensontro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                screensontroActionPerformed(evt);
            }
        });

        back.setBackground(new java.awt.Color(0, 0, 102));
        back.setFont(new java.awt.Font("Showcard Gothic", 0, 11)); // NOI18N
        back.setForeground(new java.awt.Color(102, 255, 51));
        back.setText("BACK");
        back.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backActionPerformed(evt);
            }
        });

        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/remotr.PNG"))); // NOI18N
        jLabel3.setText("jLabel3");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(back, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(240, 240, 240)
                        .addComponent(install, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(410, 410, 410)
                        .addComponent(givecommamd, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(80, 80, 80)
                        .addComponent(restart, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(240, 240, 240)
                        .addComponent(send, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(80, 80, 80)
                        .addComponent(shutdown, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(410, 410, 410)
                        .addComponent(sendmessage, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(240, 240, 240)
                        .addComponent(fetch, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(80, 80, 80)
                        .addComponent(sleep, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(410, 410, 410)
                        .addComponent(screensontro, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(80, 80, 80)
                        .addComponent(lock, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(60, 60, 60)
                        .addComponent(deleteafile)
                        .addGap(57, 57, 57)
                        .addComponent(exit, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(110, Short.MAX_VALUE))
            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addComponent(back, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(79, 79, 79)
                .addComponent(install, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(40, 40, 40)
                .addComponent(givecommamd, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(53, 53, 53)
                .addComponent(restart, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(40, 40, 40)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addComponent(lock, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(deleteafile, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)))
            .addGroup(layout.createSequentialGroup()
                .addGap(190, 190, 190)
                .addComponent(send, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(layout.createSequentialGroup()
                .addGap(120, 120, 120)
                .addComponent(shutdown, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(layout.createSequentialGroup()
                .addGap(340, 340, 340)
                .addComponent(exit, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(layout.createSequentialGroup()
                .addGap(120, 120, 120)
                .addComponent(sendmessage, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 450, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGroup(layout.createSequentialGroup()
                .addGap(273, 273, 273)
                .addComponent(fetch, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(layout.createSequentialGroup()
                .addGap(193, 193, 193)
                .addComponent(sleep, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(layout.createSequentialGroup()
                .addGap(270, 270, 270)
                .addComponent(screensontro, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void shutdownActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_shutdownActionPerformed
        // TODO add your handling code here:
            cmd="shutdown/s";
                         int opcion = JOptionPane.showConfirmDialog(null, "are you sure to shutdown your computer?", "Shutdown", JOptionPane.YES_NO_OPTION);
                           if (opcion == 0) { 
            try {
                dout.writeUTF(cmd);
            } catch (IOException ex) {
                Logger.getLogger(mainf.class.getName()).log(Level.SEVERE, null, ex);
            }

            } else {
                    done=false;
            }
    }//GEN-LAST:event_shutdownActionPerformed

    private void sleepActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sleepActionPerformed
        // TODO add your handling code here:
        cmd="rundll32.exe powrprof.dll,SetSuspendState 0,1,0";
                        int opcion = JOptionPane.showConfirmDialog(null, "are you sure to sleep?", "Sleep", JOptionPane.YES_NO_OPTION);
                            if (opcion == 0) { try {
                dout.writeUTF(cmd);
            } catch (IOException ex) {
                Logger.getLogger(mainf.class.getName()).log(Level.SEVERE, null, ex);
            }
                            } else {
                            done=false;
                        }
    }//GEN-LAST:event_sleepActionPerformed

    private void installActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_installActionPerformed
        // TODO add your handling code here:
                int opcion = JOptionPane.showConfirmDialog(null, "Do you want to send exe file first?", "Shutdown", JOptionPane.YES_NO_OPTION);
                            if (opcion == 0) {
                                JFileChooser jfc = new JFileChooser();
                                 int dialog_value = jfc.showOpenDialog(null);
                                if (dialog_value == JFileChooser.APPROVE_OPTION) {
                                File target_file = jfc.getSelectedFile();
                                String s11=target_file.getName();
                                try {
                                dout.writeUTF("sendfile");
                                 } catch (IOException ex) {
                                Logger.getLogger(mainf.class.getName()).log(Level.SEVERE, null, ex);
                                }
                                sender send=new sender(sendport);  
                                send.sendFile(target_file);
                                sendport+=1000;
                                    try {
                                        dout.writeUTF(s11);
                                    } catch (IOException ex) {
                                        Logger.getLogger(mainf.class.getName()).log(Level.SEVERE, null, ex);
                                    }

                                }
                            
                            }
                            else{
                    installfile k=new installfile(din,dout);
                    k.setVisible(true);
                    k.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
                            }
//                    cmd = "unins000.exe";	
//                    int opcion1 = JOptionPane.showConfirmDialog(null, "are you sure to install "+cmd+" your computer?", "Shutdown", JOptionPane.YES_NO_OPTION);
//                            if (opcion1== 0) {
//                try {
//                    dout.writeUTF(cmd);
//                } catch (IOException ex) {
//                    Logger.getLogger(mainf.class.getName()).log(Level.SEVERE, null, ex);
//                }
//                            } else {
//                            done=false;
//                        }
//                            }
    }//GEN-LAST:event_installActionPerformed

    private void restartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_restartActionPerformed
        cmd="shutdown -r";
                         int opcion = JOptionPane.showConfirmDialog(null, "are you sure to restart your computer?", "Restart", JOptionPane.YES_NO_OPTION);
                           if (opcion == 0) { 
            try {
                
                dout.writeUTF(cmd);
            } catch (IOException ex) {
                Logger.getLogger(mainf.class.getName()).log(Level.SEVERE, null, ex);
            }

            } else {
                    done=false;
            }
    }//GEN-LAST:event_restartActionPerformed

    private void lockActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lockActionPerformed
       cmd="Rundll32.exe User32.dll,LockWorkStation";
                         int opcion = JOptionPane.showConfirmDialog(null, "are you sure to lock your computer?", "logoff", JOptionPane.YES_NO_OPTION);
                           if (opcion == 0) { 
            try {
                
                dout.writeUTF(cmd);
            } catch (IOException ex) {
                Logger.getLogger(mainf.class.getName()).log(Level.SEVERE, null, ex);
            }

            } else {
                    done=false;
            }
        
    }//GEN-LAST:event_lockActionPerformed

    private void givecommamdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_givecommamdActionPerformed
        // TODO add your handling code here:
        try {   
             dout.writeUTF("com");
            } catch (IOException ex) {
                Logger.getLogger(mainf.class.getName()).log(Level.SEVERE, null, ex);
            }
        NewJFrame j=new NewJFrame();
        j.setVisible(true);
        j.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        String s1 = null;
        
    }//GEN-LAST:event_givecommamdActionPerformed

    private void sendActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendActionPerformed
        
        JFileChooser jfc = new JFileChooser();
        int dialog_value = jfc.showOpenDialog(null);
        if (dialog_value == JFileChooser.APPROVE_OPTION) {
        File target_file = jfc.getSelectedFile();
        try {
            dout.writeUTF("sendfile");
        } catch (IOException ex) {
           Logger.getLogger(mainf.class.getName()).log(Level.SEVERE, null, ex);
        }
        sender send=new sender(sendport);  
        send.sendFile(target_file);
        sendport+=1000;
        }
        
    }//GEN-LAST:event_sendActionPerformed

    private void fetchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fetchActionPerformed
        // TODO add your handling code here:
        try {
            dout.writeUTF("fetch");
        } catch (IOException ex) {
            Logger.getLogger(mainf.class.getName()).log(Level.SEVERE, null, ex);
        }
        fetchdir j=new fetchdir();
        j.setVisible(true);
        j.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        
    }//GEN-LAST:event_fetchActionPerformed

    private void sendmessageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendmessageActionPerformed
        // TODO add your handling code here:
        try {
            dout.writeUTF("message");
        } catch (IOException ex) {
            Logger.getLogger(mainf.class.getName()).log(Level.SEVERE, null, ex);
        }
        messagebox m=new messagebox(dout);
        m.setVisible(true);
        m.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);   
        
    }//GEN-LAST:event_sendmessageActionPerformed

    private void exitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitActionPerformed
        // TODO add your handling code here:
        super.dispose();
    }//GEN-LAST:event_exitActionPerformed

    private void deleteafileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteafileActionPerformed
        // TODO add your handling code here:
        delete j=new delete();
        j.setVisible(true);
        j.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        String s1 = null;
    }//GEN-LAST:event_deleteafileActionPerformed

    private void screensontroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_screensontroActionPerformed
        try {
            // TODO add your handling code here:
            dout.writeUTF("screen");
        } catch (IOException ex) {
            Logger.getLogger(mainf.class.getName()).log(Level.SEVERE, null, ex);
        }
        new ServerStarter().start();
    }//GEN-LAST:event_screensontroActionPerformed

    private void backActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backActionPerformed
        new Thread(new Option()).start();
        super.dispose();
    }//GEN-LAST:event_backActionPerformed
    public void writecmd(String s) throws IOException, InterruptedException
        {
            Process p = Runtime.getRuntime().exec("cmd");
            new Thread(() -> {
        try (BufferedReader reader = new BufferedReader(new InputStreamReader(p.getInputStream()))) {
            String line;
            while ((line = reader.readLine()) != null)
                System.out.println(line);
        } catch (Exception e) {
            e.printStackTrace();
        }
        }).start();
        try (PrintStream out = new PrintStream(p.getOutputStream())) {
            out.println(s);
        // .....
        }
        p.waitFor();
    
        }
    /**
     * @param args the command line arguments
     */
    public void run() {

        try {
            /* Set the Nimbus look and feel */
            //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
            /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
            * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
            */
            try {
                for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                    if ("Nimbus".equals(info.getName())) {
                        javax.swing.UIManager.setLookAndFeel(info.getClassName());
                        break;
                    }
                }
            } catch (ClassNotFoundException ex) {
                java.util.logging.Logger.getLogger(mainf.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
            } catch (InstantiationException ex) {
                java.util.logging.Logger.getLogger(mainf.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
            } catch (IllegalAccessException ex) {
                java.util.logging.Logger.getLogger(mainf.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
            } catch (javax.swing.UnsupportedLookAndFeelException ex) {
                java.util.logging.Logger.getLogger(mainf.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
            }
            //</editor-fold>
            
            /* Create and display the form */
            java.awt.EventQueue.invokeLater(new Runnable() {
                public void run() {
                    new mainf().setVisible(true);
                }
            });
            try {
                ss=new ServerSocket(8);
            } catch (IOException ex) {
                Logger.getLogger(mainf.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            s=ss.accept();
            System.out.println("Client Connected.....");
            
            din=new DataInputStream(s.getInputStream());
            
            dout=new DataOutputStream(s.getOutputStream());
            dout.writeInt(1);
//       while(true){
//        String s=din.readUTF();
//        System.out.println(s);
//       }

        } catch (IOException ex) {
            Logger.getLogger(mainf.class.getName()).log(Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton back;
    private javax.swing.JButton deleteafile;
    private javax.swing.JButton exit;
    private javax.swing.JButton fetch;
    private javax.swing.JButton givecommamd;
    private javax.swing.JButton install;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JButton lock;
    private javax.swing.JButton restart;
    private javax.swing.JButton screensontro;
    private javax.swing.JButton send;
    private javax.swing.JButton sendmessage;
    private javax.swing.JButton shutdown;
    private javax.swing.JButton sleep;
    // End of variables declaration//GEN-END:variables
}
